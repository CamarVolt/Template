# -*- coding: utf-8 -*-
"""hierarquia-de-requisitos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1COlx1TTcBgvqhHKBIj1AeeZH_MELHQAL
"""

!pip install graphviz

import graphviz as graphviz

# Definição de Cores por Tipo
COR_CATEGORIA = '#2E86DE'      # Azul - Categorias
COR_FUNCIONAL = '#27AE60'      # Verde - Requisitos Funcionais
COR_NAO_FUNCIONAL = '#E67E22'  # Laranja - Requisitos Não Funcionais

# Configuração do grafo com espaçamento reduzido
dot = graphviz.Digraph(
    comment='Hierarquia Detalhada de Requisitos SMEE',
    graph_attr={
        'rankdir': 'TB',
        'splines': 'ortho',
        'bgcolor': 'white',
        'size': '16,30!',
        'ranksep': '0.8',      # Reduzido de 3.0 para 0.8
        'nodesep': '0.6',      # Reduzido de 2.0 para 0.6
        'ratio': 'auto',
        'margin': '0.5',
        'pad': '0.5',
        'compound': 'true'
    },
    node_attr={
        'fontname': 'Arial',
        'fontsize': '10',
        'shape': 'box',
        'style': 'filled,rounded',
        'height': '0.4',       # Reduzido
        'width': '2.0',        # Reduzido
        'margin': '0.1',       # Reduzido
        'penwidth': '1.5'
    },
    edge_attr={
        'penwidth': '1.2',
        'arrowsize': '0.8',
        'minlen': '1'          # Reduzido para todas as edges
    }
)

# ======================================================================
# NÍVEL 1: VISÃO ESTRATÉGICA (Raiz)
# ======================================================================
dot.node('ROOT', 'CamarVolt',
         fillcolor='#1A5490', fontcolor='white', fontsize='12', height='0.6')

# ======================================================================
# NÍVEL 2: DOMÍNIOS PRINCIPAIS (CATEGORIAS - AZUL)
# ======================================================================
dot.node('D1', 'Domínio de Negócio', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('D2', 'Domínio Técnico', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('D3', 'Domínio de Qualidade', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('D4', 'Domínio Físico e Segurança', fillcolor=COR_CATEGORIA, fontcolor='white')

for node in ['D1', 'D2', 'D3', 'D4']:
    dot.edge('ROOT', node)

# ======================================================================
# NÍVEL 3: CATEGORIAS FUNCIONAIS (AZUL)
# ======================================================================

# Domínio de Negócio
dot.node('DN1', 'Gestão Financeira', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DN2', 'Análise e Otimização', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DN3', 'Experiência do Usuário', fillcolor=COR_CATEGORIA, fontcolor='white')

for node in ['DN1', 'DN2', 'DN3']:
    dot.edge('D1', node)

# Domínio Técnico
dot.node('DT1', 'Arquitetura de Hardware', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DT2', 'Arquitetura de Software', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DT3', 'Infraestrutura de Rede', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DT4', 'Protocolos e Padrões', fillcolor=COR_CATEGORIA, fontcolor='white')

for node in ['DT1', 'DT2', 'DT3', 'DT4']:
    dot.edge('D2', node)

# Domínio de Qualidade
dot.node('DQ1', 'Desempenho', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DQ2', 'Confiabilidade', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DQ3', 'Segurança da Informação', fillcolor=COR_CATEGORIA, fontcolor='white')

for node in ['DQ1', 'DQ2', 'DQ3']:
    dot.edge('D3', node)

# Domínio Físico
dot.node('DF1', 'Restrições Dimensionais', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DF2', 'Segurança Elétrica', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('DF3', 'Aspectos Estéticos', fillcolor=COR_CATEGORIA, fontcolor='white')

for node in ['DF1', 'DF2', 'DF3']:
    dot.edge('D4', node)

# ======================================================================
# NÍVEL 4: SUBCATEGORIAS (AZUL)
# ======================================================================

# Gestão Financeira
dot.node('GF1', 'Cálculo de Custos', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('GF2', 'Tarifação', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.edge('DN1', 'GF1')
dot.edge('DN1', 'GF2')

# Análise e Otimização
dot.node('AO1', 'Visualização de Dados', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('AO2', 'Relatórios', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('AO3', 'Exportação de Dados', fillcolor=COR_CATEGORIA, fontcolor='white')
for node in ['AO1', 'AO2', 'AO3']:
    dot.edge('DN2', node)

# Experiência do Usuário
dot.node('UX1', 'Interface Web', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('UX2', 'Alertas e Notificações', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.edge('DN3', 'UX1')
dot.edge('DN3', 'UX2')

# Hardware
dot.node('HW1', 'Microcontroladores', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('HW2', 'Sensores de Medição', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('HW3', 'Componentes de Potência', fillcolor=COR_CATEGORIA, fontcolor='white')
for node in ['HW1', 'HW2', 'HW3']:
    dot.edge('DT1', node)

# Software
dot.node('SW1', 'Firmware Embarcado', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('SW2', 'Backend', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('SW3', 'Persistência de Dados', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('SW4', 'Ferramentas de Visualização', fillcolor=COR_CATEGORIA, fontcolor='white')
for node in ['SW1', 'SW2', 'SW3', 'SW4']:
    dot.edge('DT2', node)

# Rede
dot.node('NET1', 'Conectividade WiFi', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('NET2', 'Protocolos de Comunicação', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.edge('DT3', 'NET1')
dot.edge('DT3', 'NET2')

# Protocolos
dot.node('PR1', 'Protocolos de Segurança', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('PR2', 'Formatos de Dados', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.edge('DT4', 'PR1')
dot.edge('DT4', 'PR2')

# ======================================================================
# NÍVEL 5: GRUPOS ESPECÍFICOS (AZUL)
# ======================================================================

# Microcontroladores
dot.node('MC1', 'Família ESP', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.edge('HW1', 'MC1')

# Sensores
dot.node('SE1', 'Sensores de Tensão', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('SE2', 'Sensores de Corrente', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('SE3', 'Módulos Integrados', fillcolor=COR_CATEGORIA, fontcolor='white')
for node in ['SE1', 'SE2', 'SE3']:
    dot.edge('HW2', node)

# Medições
dot.node('MD1', 'Parâmetros Elétricos', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('MD2', 'Temporização', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.edge('HW3', 'MD1')
dot.edge('HW3', 'MD2')

# Backend Details
dot.node('BE1', 'Tecnologias Web', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('BE2', 'APIs', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.edge('SW2', 'BE1')
dot.edge('SW2', 'BE2')

# Visualização Details
dot.node('VZ1', 'Dashboards', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.node('VZ2', 'Gráficos Temporais', fillcolor=COR_CATEGORIA, fontcolor='white')
dot.edge('SW4', 'VZ1')
dot.edge('SW4', 'VZ2')

# ======================================================================
# NÍVEL 6: REQUISITOS FINAIS
# VERDE = Funcional (O que o sistema FAZ)
# LARANJA = Não Funcional (COMO o sistema faz, restrições, qualidade)
# ======================================================================

# ESP Controllers - FUNCIONAL (escolha de tecnologia para implementar funcionalidade)
dot.node('ESP32', 'RF11: ESP32', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.node('ESP8266', 'RF12: ESP8266', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('MC1', 'ESP32')
dot.edge('MC1', 'ESP8266')

# PZEM Module - FUNCIONAL (hardware que implementa medição)
dot.node('PZEM', 'RF13: PZEM-004T', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('SE3', 'PZEM')

# Medições Específicas - FUNCIONAL (funcionalidades principais)
dot.node('MED1', 'RF01: Medir Tensão, Corrente,\nPotência e Fator de Potência', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.node('MED2', 'RNF09: Corrente até 30A', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')  # Limite técnico
dot.node('MED3', 'RF02: Calcular Consumo em kWh', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('MD1', 'MED1')
dot.edge('SE2', 'MED2')
dot.edge('MD1', 'MED3')

# Temporização - FUNCIONAL (tempo real) e NÃO FUNCIONAL (amostragem)
dot.node('TIME1', 'RNF10: Amostragem a cada 10s', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')  # Requisito de performance
dot.node('TIME2', 'RF07: Exibir dados em Tempo Real', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('MD2', 'TIME1')
dot.edge('MD2', 'TIME2')

# Custos - FUNCIONAL (funcionalidades de cálculo)
dot.node('COST1', 'RF08: Cálculo de Custo\nPersonalizado', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.node('COST2', 'RF09: Presets de Tarifas\nPré-Configurados', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('GF1', 'COST1')
dot.edge('GF2', 'COST2')

# Visualização - FUNCIONAL
dot.node('VIS1', 'RF03: Gráficos e Relatórios\nVisuais', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('VZ2', 'VIS1')

# Exportação - FUNCIONAL
dot.node('EXP1', 'RF05: Exportar em CSV', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.node('EXP2', 'RF05: Exportar em JSON', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('AO3', 'EXP1')
dot.edge('AO3', 'EXP2')

# Alertas - FUNCIONAL
dot.node('ALERT1', 'RF04: Sistema de Alertas\nConfigurável', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('UX2', 'ALERT1')

# WiFi - FUNCIONAL (conectividade é uma funcionalidade)
dot.node('WIFI1', 'RF06: Conexão WiFi', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('NET1', 'WIFI1')

# Segurança - NÃO FUNCIONAL (requisito de qualidade/segurança)
dot.node('SEC1', 'RNF03: Criptografia TLS', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')
dot.edge('PR1', 'SEC1')

# Firmware - FUNCIONAL (tecnologia de implementação)
dot.node('FW1', 'RF14: Firmware em C++', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('SW1', 'FW1')

# Backend Tech - FUNCIONAL (escolhas tecnológicas)
dot.node('TECH1', 'RF15: Node.js', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.node('TECH2', 'RF16: Grafana', fillcolor=COR_FUNCIONAL, fontcolor='white')
dot.edge('BE1', 'TECH1')
dot.edge('VZ1', 'TECH2')

# Performance - NÃO FUNCIONAL (requisitos de qualidade)
dot.node('PERF1', 'RNF02: Tempo de Resposta < 5s', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')
dot.node('PERF2', 'RNF01: Disponibilidade de 99%', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')
dot.edge('DQ1', 'PERF1')
dot.edge('DQ2', 'PERF2')

# Storage - NÃO FUNCIONAL (requisito de retenção)
dot.node('STOR1', 'RNF04: Retenção de Dados\npor 12 meses', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')
dot.edge('SW3', 'STOR1')

# Restrições Físicas - NÃO FUNCIONAL (restrições de design)
dot.node('DIM1', 'RNF05: Protrusão Máxima de 10cm', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')
dot.node('DIM2', 'RNF06: Largura/Altura < 5cm', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')
dot.edge('DF1', 'DIM1')
dot.edge('DF1', 'DIM2')

# Segurança Elétrica - NÃO FUNCIONAL (restrição de segurança)
dot.node('SAFE1', 'RNF07: Proteção contra\nChoque e Fogo', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')
dot.edge('DF2', 'SAFE1')

# Estética - NÃO FUNCIONAL (requisito de usabilidade/design)
dot.node('AEST1', 'RNF08: Design Discreto\ne Não-Ofensivo', fillcolor=COR_NAO_FUNCIONAL, fontcolor='white')
dot.edge('DF3', 'AEST1')

# Renderização
dot.render(filename='hierarquia_requisitosFINAL', format='svg', cleanup=True)